#include <HPCortex.hpp>

/**brief
 * @brief Main program entry point
 * 
 * Initializes the application, sets up communication, and tests various 
 * parallelization modes including node-level pipelining, color pipelining, 
 * global pipelining, disabled parallelism, and restores the default setup.
 *
 * @param argc Number of command line arguments
 * @param argv Array of command line argument strings
 * This comment was generated by meta-llama/Llama-3.3-70B-Instruct:None at temperature 0.2.
*/ 
int main(int argc, char** argv){
  initialize(argc,argv);

  int world_rank = communicators().worldRank();
  
  if(!world_rank) std::cout << "Default setup:" << std::endl << std::flush;
  communicators().reportSetup();

  MPI_Barrier(MPI_COMM_WORLD);
  
  if(!world_rank) std::cout << "Enabling node-level pipelining" << std::endl << std::flush;
  communicators().enableNodePipelining();
  communicators().reportSetup();


  MPI_Barrier(MPI_COMM_WORLD);
  
  if(!world_rank) std::cout << "Dividing ranks into blocks of 2" << std::endl << std::flush;
  communicators().enableColorPipelining(world_rank / 2);
  communicators().reportSetup();


  MPI_Barrier(MPI_COMM_WORLD);
  
  if(!world_rank) std::cout << "All ranks in one pipeline" << std::endl << std::flush;
  communicators().enableGlobalPipelining();
  communicators().reportSetup();

  MPI_Barrier(MPI_COMM_WORLD);
  
  if(!world_rank) std::cout << "Disable all parallelism" << std::endl << std::flush;
  communicators().disableParallelism();
  communicators().reportSetup();


  MPI_Barrier(MPI_COMM_WORLD);
  
  if(!world_rank) std::cout << "Restore default setup" << std::endl << std::flush;
  communicators().enableDDPnoPipelining();
  communicators().reportSetup();

}
