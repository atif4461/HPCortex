/**
 * @brief Computes the output value of the softmax layer for a given input.
 *
 * @param x The input to the softmax layer.
 * @return The computed output value as a matrix of FloatType.
 * This comment was generated by meta-llama/Llama-3.3-70B-Instruct:None at temperature 0.2.
*/ 
template<typename FloatType, typename InputType, typename Store >
Matrix<FloatType> SoftMaxLayer<FloatType,InputType,Store>::value(const InputType &x){	
  Matrix<FloatType> in = leaf.v.value(x);
  return cpt.value(in);
}

/**
 * Computes the derivative of the softmax layer with respect to its inputs.
 *
 * @param[in,out] cost_deriv   The derivative of the cost function with respect to the output of this layer
 * @param[in]     off         Offset value used in computation
 * @param[in]     above_deriv_ Derivative of the layer above this one
 * @param[out]    input_above_deriv_return  Pointer to store the computed derivative
 * This comment was generated by meta-llama/Llama-3.3-70B-Instruct:None at temperature 0.2.
*/ 
template<typename FloatType, typename InputType, typename Store >
void SoftMaxLayer<FloatType,InputType,Store>::deriv(Vector<FloatType> &cost_deriv, int off, Matrix<FloatType> &&above_deriv_, InputType* input_above_deriv_return) const{
  Matrix<FloatType> layer_deriv;
  cpt.deriv(std::move(above_deriv_), layer_deriv);
  leaf.v.deriv(cost_deriv,off,std::move(layer_deriv),input_above_deriv_return);        
}
