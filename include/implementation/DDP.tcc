/**
 * @brief Computes the average of distributed data across pipeline leaders and broadcasts the result.
 *
 * This function reduces the input data array across all pipeline leaders,
 * computes the average by dividing the sum by the number of ranks, and then
 * broadcasts the averaged data to all pipeline members if required.
 *
 * @param[in,out] data The input data array to be averaged.
 * @param[in] len The length of the input data array.
 * @param[in] pipeline_bcast Flag indicating whether to broadcast the averaged data to pipeline members.
 * This comment was generated by meta-llama/Llama-3.3-70B-Instruct:None at temperature 0.2.
*/ 
template<typename FloatType>
void ddpAverage(FloatType* data, size_t len, bool pipeline_bcast){
  //Communicate only on the pipeline leaders
  if(communicators().isPipelineLeader()){
    int nrank = communicators().ddpNrank();
    commsReduce(data,len,communicators().ddpCommunicator());
    for(size_t i=0;i<len;i++) data[i] /= nrank;
  }
  //Broadcast to pipeline members (e.g. for parameter update)
  if(pipeline_bcast & communicators().pipelineNrank()>1){
    commsBroadcast(data, len, 0, communicators().pipelineCommunicator());
  }
}

/**
 * @brief Computes the average value of a vector with optional broadcast.
 * @param v Input vector of FloatType values.
 * @param pipeline_bcast Flag indicating whether to perform pipeline broadcast.
 * This comment was generated by meta-llama/Llama-3.3-70B-Instruct:None at temperature 0.2.
*/ 
template<typename FloatType>
void ddpAverage(Vector<FloatType> &v, bool pipeline_bcast){
  autoView(v_v,v,HostReadWrite);
  ddpAverage(v_v.data(),v_v.data_len(), pipeline_bcast);
}
